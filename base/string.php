<?php

/**
==========================
字符串长度 strlen() mb_strlen()
==========================

在php中，函数strlen()返回字符串的长度，实际上是计算得到字符串所占的字节长度，在不同的编码下，字符串所占的字节长度是不同的。

列举几个常用的字符编码占用字节情况：
ASCII码：一个ASCII码就是一个字节
UTF8编码：一个英文字符占用一个字节，一个中文（含繁体）占用三个字节
Unicode编码：一个英文字符占用两个字节，一个中文（含繁体）占用两个字节
GBK和GBK2312编码：一个中文（含繁体）占用两个字节

在php中计算字符串长度时会出现一些问题，strlen()函数并不能准确的返回字符串的实际长度，当字符串中含有中文，全角符号等情形时，函数实际返回的不是字符串的字符长度，而是字符串所占的字节长度。在一些场景下，这并不符合我们的需求，为了解决这个问题，我们可以使用mb_strlen()函数来协调字符串字符长度和字节长度，真实的计算出其字符长度。

*/

$str = '国人。';
var_dump(strlen($str), mb_strlen($str));
/*  
输出：
===========================
11 、7

结果分析：
===========================
PHP内置的字符串长度函数strlen无法正确处理中文字符串，它得 到的只是字符串所占的字节数。
GB2312编码下，一个汉字占2个字节；
UTF-8编码下，一个汉字占3个字节

采用mb_strlen函数可以较好地解决这个问题。mb_strlen的用法和strlen类似，只不过它有第二个可选参数用于指定字符编码。例如得到UTF-8的字符串$str长度，可以用 mb_strlen($str,'UTF-8')。指定编码UTF-8，则会将一个中文字符当作长度1。
如果省略第二个参数，则会使用PHP的内部编码。内部编码可以通过 mb_internal_encoding()函数得到。

注意：mb_strlen并不是PHP核心函数，使用前需要确保在php.ini中加载了php_mbstring.dll，即确保“extension=php_mbstring.dll”这一行存在并且没有被注释掉，否则会出现未定义函 数的问题。


延伸:
===========================
字符和字节是有区别的。
字符：表示一个不可继续拆分的符号标识；
字节：表示的是存储单位；

一个汉字占一个字符，而具体一个汉字占几个字节要视编码而定，gbk编码下，一个汉字占两个字节，utf-8编码下，一个汉字占三个字节。

关于数据存储单位的简单说明：
计算机数据存储基本单位是字节（Byte，简称B），数据传输的基本单位是“位”（bit，简称b），一个字节等于8位二进制，一个位表示一个0或1。

一个字节的取值范围为0~255 （2^8）。
1B=8b
1KB=1024B=2^10B
1MB=1024KB=2^20B
1GB=1024MB=2^30B
1TB=1024GB=2^40B
1PB=1024TB=2^50B

*/

/*



*/








