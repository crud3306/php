
各种基础排序算法


参考地址：
https://blog.csdn.net/chen529834149/article/details/76574150 （需看）  
https://www.cnblogs.com/isykw/p/6115461.html
https://www.cnblogs.com/hellohell/p/5718175.html
https://www.jb51.net/article/92609.htm (需看)
https://blog.csdn.net/aaroun/article/details/79132130 (需看)

http://www.sohu.com/a/138837563_763273 （需看）

====================
冒泡排序
====================
冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，依次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。

时间复杂度：O(n*n) 即： O(n的平方)

步骤：
-------------------------------
比较相邻的元素。如果第一个比第二个大，就交换他们两个。
对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。
针对所有的元素重复以上的步骤，除了最后一个。
持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。

具体代码：
-------------------------------
$arr=array(1,43,54,62,21,66,32,78,36,76,39);
function bubbleSort ($arr)
{
     $len = count($arr);

     //该层循环控制 需要冒泡的轮数
     for ($i=1; $i<$len; $i++) {

          $has_change = false;

          //该层循环用来控制每轮 冒出一个数 需要比较的次数
          for ($k=0; $k<$len-$i; $k++) {
               if($arr[$k] > $arr[$k+1]) {
                    $tmp = $arr[$k+1]; // 声明一个临时变量
                    $arr[$k+1] = $arr[$k];
                    $arr[$k] = $tmp;

                    $has_change = true;
               }
          }

          if (!$has_change) {
            break;
          }
     }
     return $arr;
}



====================
快速排序
====================
快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来，且在大部分真实世界的数据，可以决定设计的选择，减少所需时间的二次方项之可能性。

时间复杂度：Ο(nlogn)

步骤：
--------------------------------
从数列中挑出一个元素，称为 “基准”（pivot），
重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。
递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。

具体代码：
---------------------------------
function quick_sort($arr)
{
     //判断参数是否是一个数组
     if (!is_array($arr)) return false;

     //递归出口:数组长度为1，直接返回数组
     $length = count($arr);
     if ($length <= 1) return $arr;

     //数组元素有多个,则定义两个空数组
     $left = $right = array();
     //使用for循环进行遍历，把第一个元素当做比较的对象
     for ($i = 1; $i < $length; $i++)
     {
          //判断当前元素的大小
          if ($arr[$i] < $arr[0]) {
               $left[] = $arr[$i];
          } else {
               $right[] = $arr[$i];
          }
     }

     //递归调用
     $left = quick_sort($left);
     $right = quick_sort($right);

     //将所有的结果合并，这样是升序
     return array_merge($left, array($arr[0]), $right);
     // 这就就是降序了
     // return array_merge($right, array($arr[0]), $left);
}

性能优化分析：  
该算法是通过分治递归来实现的，其效率很大程度上取决于参考元素的选择，可以选择数组的中间元素，也可以随机得到三个元素，然后选择中间的那个元素（三数中值法）。  
另外还有一点，就是当我们在分割时，如果分割出来的子序列的长度很小的话（小于5到20），通常递归的排序的效率就没有诸如插入排序或希尔排序那么快了。因此可以会去判断数组的长度，如果小于10的话，直接用插入排序，而不再递归调用这个快速排序。  


注：【冒泡排序】 和 【快速排序】 规属为 【交换排序】


====================
插入排序
====================
插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。  
它的工作原理：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。  
插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。

时间复杂度：O(n*n) 即： O(n的平方) 

步骤：
-------------------------------
1) 从第一个元素开始，该元素可以认为已经被排序  
2) 取出下一个元素（新元素），在已经排序的元素序列中从后向前扫描   
3) 如果扫描到的元素（已排序的元素）大于新元素，将该元素移到下一位置  
4) 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置  
5) 将新元素插入到该位置中  
6) 重复步骤2  

具体代码：
--------------------------------
function insert_sort($arr)
{
    $len=count($arr);

    for($i=1; $i<$len; $i++) {
        //获得当前需要比较的元素值。
        $tmp = $arr[$i];

        //内层循环控制 比较 并 插入
        for ($j=$i-1; $j>=0; $j--) {

            //$arr[$i];//需要插入的元素; $arr[$j];//需要比较的元素
            if ($tmp < $arr[$j]) {
                //发现插入的元素要小，交换位置
                //将后边的元素与前面的元素互换
                $arr[$j+1] = $arr[$j];
                //将前面的数设置为 当前需要交换的数
                $arr[$j] = $tmp;

            } else {
                //如果碰到不需要移动的元素
                //由于是已经排序好是数组，则前面的就不需要再次比较了。
                break;
            }
        }
    }

    return $arr;
}



====================
选择排序
====================
选择排序(Selection sort)是一种简单直观的排序算法。  
它的工作原理如下：每次找出最大的元素的位置，然后和最后一位元素更换。
或者：每次找出最小的元素的位置，然后和第一位元素更换。

时间复杂度：O(n*n) 即： O(n的平方) 

具体代码：
------------------------------
//实现思路 双重循环完成，外层控制轮数，当前的最小值。内层 控制的比较次数
function select_sort($arr) 
{
     //$i 当前最小值的位置， 需要参与比较的元素
     for($i = 0, $len = count($arr); $i < $len-1; $i++) {
          //先假设最小的值的位置
          $p = $i;

          //$j 当前都需要和哪些元素比较，$i 后边的。
          for ($j=$i+1; $j<$len; $j++) {
               //$arr[$p] 是 当前已知的最小值
               if($arr[$p] > $arr[$j]) {
                    //比较，发现更小的,记录下最小值的位置；
                    //并且在下次比较时，应该采用已知的最小值进行比较。
                    $p = $j;
               }
          }

          //已经确定了当前的最小值的位置，保存到$p中。
          //如果发现 最小值的位置与当前假设的位置$i不同，则位置互换即可
          if ($p != $i) {
               $tmp = $arr[$p];
               $arr[$p] = $arr[$i];
               $arr[$i] = $tmp;
          }
     }

     //返回最终结果
     return $arr;
}


====================
堆排序 （最大堆/最小堆）
====================
堆排序求升序用大顶堆，求降序用小顶堆。

本例用求降序的小顶堆来解析。

时间复杂度：Ο(nlogn)

堆排序步骤如下：
----------
1、我们将数据（49、38、65、97、76、13、27、50）建立一个数组$arr；
2、用数组$arr建立一个小顶堆（主要步骤，会在代码注释里解释，下图是用一个数组建立小顶堆的过程）；
3、将堆的根（最小的元素）与最后一个叶子交换，并将堆长度减一，跳到第二步；
4、重复2-3步，直到堆中只有一个结点，排序完成。

实现：
-----------
//因为是数组,下标从0开始,所以,下标为n根结点的左子结点为2n+1,右子结点为2n+2;  
//初始化值,建立初始堆
```
$arr=array(49,38,65,97,76,13,27,50);
$arrSize=count($arr);

//将第一次排序抽出来，因为最后一次排序不需要再交换值了。
buildHeap($arr, $arrSize);

for($i=$arrSize-1; $i>0; $i--){
    swap($arr,$i,0);
    $arrSize--;
    buildHeap($arr,$arrSize);   
}

//用数组建立最小堆
function buildHeap(&$arr,$arrSize){
    //计算出最开始的下标$index,如图,为数字"97"所在位置,比较每一个子树的父结点和子结点,将最小值存入父结点中
    //从$index处对一个树进行循环比较,形成最小堆
    for($index=intval($arrSize/2)-1; $index>=0; $index--){
        //如果有左节点,将其下标存进最小值$min
        if($index*2+1 < $arrSize){
            $min=$index*2+1;

            //如果有右子结点,比较左右结点的大小,如果右子结点更小,将其结点的下标记录进最小值$min
            if($index*2+2<$arrSize){
                if($arr[$index*2+2]<$arr[$min]){
                    $min=$index*2+2;
                }
            }

            //将子结点中较小的和父结点比较,若子结点较小,与父结点交换位置,同时更新较小
            if($arr[$min]<$arr[$index]){
                swap($arr,$min,$index);
            }   
        }
    }
}

//此函数用来交换下数组$arr中下标为$one和$another的数据
function swap(&$arr,$one,$another){
    $tmp=$arr[$one];
    $arr[$one]=$arr[$another];
    $arr[$another]=$tmp;
}
```


=====================
希尔排序
=====================
基本思想：  
希尔排序是指记录按下标的一定增量分组，对每一组使用 直接插入排序 ，随着增量逐渐减少，每组包含的关键字越来越多，当增量减少至 1 时，整个序列恰好被分成一组，算法便终止。

操作步骤：  
先取一个小于 n（序列记录个数） 的整数d1作为第一个增量，把文件的全部记录分组。所有距离为 d1 的倍数的记录放在同一个组中。先在各组内进行 直接插入排序；然后，取第二个增量 d2 < d1 重复上述的分组和排序，直至所取的增量 dt=1( dt < d(t-1) …< d2 < d1)，即所有记录放在同一组中进行 直接插入排序 为止.  
```
<?php
//希尔排序(对直接插入排序的改进)
function ShellSort(array &$arr)
{
  $count = count($arr);
  $inc = $count;  //增量
  do {
    //计算增量
    //$inc = floor($inc / 3) + 1;
    $inc = ceil($inc / 2);
    for ($i = $inc; $i < $count; $i++) {
      $temp = $arr[$i];  //设置哨兵
      //需将$temp插入有序增量子表
      for ($j = $i - $inc; $j >= 0 && $arr[$j + $inc] < $arr[$j]; $j -= $inc) {
        $arr[$j + $inc] = $arr[$j]; //记录后移
      }
      //插入
      $arr[$j + $inc] = $temp;
    }
    //增量为1时停止循环
  } while ($inc > 1);
}
//$arr = array(9,1,5,8,3,7,4,6,2);
$arr = array(49,38,65,97,76,13,27,49,55,04);
ShellSort($arr);
var_dump($arr);
```


=====================
归并排序
=====================
归并排序
归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。

时间复杂度：Ο(nlogn)

归并过程
归并排序的核心就是如何将两个有序序列进行合并，假定有两个有序数组，比较两个有序数组的首个元素，谁小就取谁，并将该元素放入第三个数组中，取了之后在相应的数组中将删除此元素，依次类推，当取到一个数组已经没有元素时，就可将另一数组的剩余元素直接添加到第三个数组中。

原理
1、将序列每相邻两个数字进行归并操作，形成ceil(n/2)个序列，排序后每个序列包含两个元素,最后一个序列可能只有一个元素。
2、将上述序列再次归并，形成ceil(n/4)个序列，每个序列包含四个元素，最后一个序列可能只有三个及以下元素。
3、重复步骤2，直到所有元素排序完毕。
```
<?php
function merge_sort($arr){
  $length=count($arr);
  if($length<=1){
    return $arr;
  }

  //分解数组，递归排序
  $half=ceil($length/2);
  $arr2=array_chunk($arr, $half);
  $left=merge_sort($arr2[0]);
  $right=merge_sort($arr2[1]);

  while(count($left) && count($right)){
    if ($left[0]<$right[0]) {
      $reg[]=array_shift($left);
    } else {
      $reg[]=array_shift($right);
    }
  }
  return array_merge($reg, $left, $right);
}
```






=====================
顺序查找（数组里查找某个元素）
=====================
function seq_sch($array, $k)
{   
   for($i=0; $i<$n; $i++){
      if ($array[$i] == $k){
         return $i;
      }
   }

  return -1;
}


=====================
二分查找，也叫做折半查找（仅适用于事先已经排好序的顺序表）  
排好序的数组里查找某个元素
=====================
function bin_sch($array, $low, $high, $k){
   if ( $low <= $high){
        $mid = round(($low+$high)/2 );
        if ($array[$mid] == $k){
             return $mid;
        } elseif ( $k < $array[$mid]){
             return bin_sch($array, $low, $mid-1, $k);
        } else{
             return bin_sch($array, $mid+ 1, $high, $k);
        }
   }
   return -1;
}



php写一个双向队列（腾讯）
=====================
地址：https://www.cnblogs.com/muziyun1992/p/6724028.html  
<?php
class Deque{
  private $queue = array();
  
  function addFirst($item){//头入队
    return array_unshift($this->queue,$item);
  }
  function addLast($item){//尾入队
    return array_push($this->queue,$item);
  }
  function getLength(){
    return count($this->queue);
  }
  function getFirst(){
    return array_shift($this->queue);
  }
  function getLast(){
    return array_pop($this->queue);
  }
  /*
  function removeFirst(){//头出队
    return array_shift($this->queue);
  }
  function removeLast(){//尾出队
    return array_pop($this->queue);
  }
  */
  function show(){//显示
    echo implode(" ",$this->queue);
  }
  function clear(){//清空
    unset($this->queue);
  } 
}
$q=new Deque();
$q->addFirst(1);
$q->addLast(5);
$q->getFirst();
$q->getLast();
$q->addFirst(2);
$q->addLast(4);
$q->show();


写一个通用的二维数组排序
=====================
<?php
function array_sort_by_any_column($list, $column_id, $order_type){
    $array_temp = [];
    foreach ($list as $key=>$value) {
        $array_temp[$key] = $value[$column_id];
    }

    if ($order_type === "ASC"){ //顺序
        asort($array_temp);
    } else {
        arsort($array_temp);
    }

    // asort或arsort排序后，数据会重新排序，但原下标值不会变。正是因该下标不变，才可利用下标对二维数组排序
    //var_dump($array_temp);

    $result = [];
    foreach($array_temp as $key=>$value){
        $result[] = $list[$key];
    }
    return $result;
}

$arr = array(
    array('num'=>5, 'value'=>6),
    array('num'=>2, 'value'=>39),
    array('num'=>36, 'value'=>29)
);
$sortarr = array_sort_by_any_column($arr, 'num', 'ASC');
print_r($sortarr);




使对象可以像数组一样进行foreach循环，要求属性必须是私有。
(Iterator模式的PHP5实现，写一类实现Iterator接口)（腾讯）
=====================
<?php
class Test implements Iterator
{
     private $item = ['id'=>1,'name'=>'php'];

     public function rewind(){
          reset($this->item);
     }

     public function current(){
          return current($this->item);
     }

     public function key(){
          return key($this->item);
     }

     public function next(){
          return next($this->item);
     }

     public function valid(){
          return ($this->current() !== false);
     }
}

// 测试
$t = new Test;
foreach($t as $k=>$v){
     echo$k,'--->',$v,'<br/>';
}







